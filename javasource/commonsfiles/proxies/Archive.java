// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package filesimportmodule.proxies;

public class Archive extends system.proxies.FileDocument
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "FilesImportModule.Archive";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		archiveType("archiveType"),
		FileID("FileID"),
		Name("Name"),
		DeleteAfterDownload("DeleteAfterDownload"),
		Contents("Contents"),
		HasContents("HasContents"),
		Archive_FileDocument("FilesImportModule.Archive_FileDocument");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Archive(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "FilesImportModule.Archive"));
	}

	protected Archive(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject archiveMendixObject)
	{
		super(context, archiveMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("FilesImportModule.Archive", archiveMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a FilesImportModule.Archive");
	}

	/**
	 * @deprecated Use 'Archive.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static filesimportmodule.proxies.Archive initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return filesimportmodule.proxies.Archive.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static filesimportmodule.proxies.Archive initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new filesimportmodule.proxies.Archive(context, mendixObject);
	}

	public static filesimportmodule.proxies.Archive load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return filesimportmodule.proxies.Archive.initialize(context, mendixObject);
	}

	public static java.util.List<filesimportmodule.proxies.Archive> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<filesimportmodule.proxies.Archive> result = new java.util.ArrayList<filesimportmodule.proxies.Archive>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//FilesImportModule.Archive" + xpathConstraint))
			result.add(filesimportmodule.proxies.Archive.initialize(context, obj));
		return result;
	}

	/**
	 * Set value of archiveType
	 * @param archivetype
	 */
	public final filesimportmodule.proxies.ArchiveType getarchiveType()
	{
		return getarchiveType(getContext());
	}

	/**
	 * @param context
	 * @return value of archiveType
	 */
	public final filesimportmodule.proxies.ArchiveType getarchiveType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.archiveType.toString());
		if (obj == null)
			return null;

		return filesimportmodule.proxies.ArchiveType.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of archiveType
	 * @param archivetype
	 */
	public final void setarchiveType(filesimportmodule.proxies.ArchiveType archivetype)
	{
		setarchiveType(getContext(), archivetype);
	}

	/**
	 * Set value of archiveType
	 * @param context
	 * @param archivetype
	 */
	public final void setarchiveType(com.mendix.systemwideinterfaces.core.IContext context, filesimportmodule.proxies.ArchiveType archivetype)
	{
		if (archivetype != null)
			getMendixObject().setValue(context, MemberNames.archiveType.toString(), archivetype.toString());
		else
			getMendixObject().setValue(context, MemberNames.archiveType.toString(), null);
	}

	/**
	 * @return value of Archive_FileDocument
	 */
	public final java.util.List<system.proxies.FileDocument> getArchive_FileDocument() throws com.mendix.core.CoreException
	{
		return getArchive_FileDocument(getContext());
	}

	/**
	 * @param context
	 * @return value of Archive_FileDocument
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<system.proxies.FileDocument> getArchive_FileDocument(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<system.proxies.FileDocument> result = new java.util.ArrayList<system.proxies.FileDocument>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.Archive_FileDocument.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(system.proxies.FileDocument.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of Archive_FileDocument
	 * @param archive_filedocument
	 */
	public final void setArchive_FileDocument(java.util.List<system.proxies.FileDocument> archive_filedocument)
	{
		setArchive_FileDocument(getContext(), archive_filedocument);
	}

	/**
	 * Set value of Archive_FileDocument
	 * @param context
	 * @param archive_filedocument
	 */
	public final void setArchive_FileDocument(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<system.proxies.FileDocument> archive_filedocument)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (system.proxies.FileDocument proxyObject : archive_filedocument)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.Archive_FileDocument.toString(), identifiers);
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final filesimportmodule.proxies.Archive that = (filesimportmodule.proxies.Archive) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "FilesImportModule.Archive";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
